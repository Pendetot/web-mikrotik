#!/usr/bin/env python3

import os
import sys
import base64
import json
import getpass
import time
from pathlib import Path
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from typing import List, Dict, Optional, Tuple
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock
import mimetypes

class GitHubUploader:
    def __init__(self):
        self.token = None
        self.username = None
        self.headers = None
        self.base_url = "https://api.github.com"
        self.script_name = os.path.basename(__file__)
        
        self.session = requests.Session()
        retry_strategy = Retry(
            total=5,
            backoff_factor=2,
            status_forcelist=[409, 429, 500, 502, 503, 504],
            allowed_methods=["GET", "PUT", "POST"],
            raise_on_status=False
        )
        adapter = HTTPAdapter(
            max_retries=retry_strategy, 
            pool_connections=10, 
            pool_maxsize=50,
            socket_options=[(6, 1, 1)]
        )
        self.session.mount("https://", adapter)
        self.session.timeout = (10, 30)
        
        self.print_lock = Lock()
        self.counter_lock = Lock()
        self.success_count = 0
        self.failed_count = 0
        self.conflict_count = 0
        
        self.max_workers = 3
        self.max_file_size = 25 * 1024 * 1024
        self.request_delay = 0.1
        
    def safe_print(self, message: str):
        with self.print_lock:
            print(message)
    
    def update_counters(self, success: bool, conflict: bool = False):
        with self.counter_lock:
            if conflict:
                self.conflict_count += 1
            elif success:
                self.success_count += 1
            else:
                self.failed_count += 1
        
    def authenticate(self) -> bool:
        print("=== GitHub Project Uploader (Fast Version) ===")
        print("Masukkan GitHub Personal Access Token Anda")
        print("(Token tidak akan ditampilkan untuk keamanan)")
        
        self.token = getpass.getpass("GitHub Token: ").strip()
        
        if not self.token:
            print("‚ùå Token tidak boleh kosong!")
            return False
            
        self.headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "GitHub-Uploader-Script-Fast"
        }
        
        self.session.headers.update(self.headers)
        
        try:
            response = self.session.get(f"{self.base_url}/user")
            if response.status_code == 200:
                user_data = response.json()
                self.username = user_data['login']
                print(f"‚úÖ Berhasil login sebagai: {self.username}")
                return True
            else:
                print("‚ùå Token tidak valid!")
                return False
        except Exception as e:
            print(f"‚ùå Error saat verifikasi token: {e}")
            return False
    
    def get_repositories(self) -> List[Dict]:
        try:
            repos = []
            page = 1
            per_page = 100
            
            while True:
                response = self.session.get(
                    f"{self.base_url}/user/repos",
                    params={
                        "per_page": per_page,
                        "page": page,
                        "sort": "updated",
                        "affiliation": "owner"
                    }
                )
                
                if response.status_code != 200:
                    break
                
                page_repos = response.json()
                if not page_repos:
                    break
                    
                repos.extend(page_repos)
                page += 1
                
                if len(page_repos) < per_page:
                    break
            
            return repos
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return []
    
    def select_repository(self, repos: List[Dict]) -> Optional[Dict]:
        if not repos:
            print("‚ùå Tidak ada repository yang ditemukan!")
            return None
        
        print(f"\nüìÇ Daftar Repository ({len(repos)} repository):")
        print("-" * 60)
        
        for i, repo in enumerate(repos, 1):
            status = "üîí Private" if repo['private'] else "üåê Public"
            updated = repo['updated_at'][:10]
            print(f"{i:2d}. {repo['name']:<30} {status:<12} (Update: {updated})")
        
        print("-" * 60)
        print("0. Buat repository baru")
        
        while True:
            try:
                choice = input(f"\nPilih repository (0-{len(repos)}): ").strip()
                
                if choice == "0":
                    return self.create_new_repository()
                
                choice_num = int(choice)
                if 1 <= choice_num <= len(repos):
                    selected_repo = repos[choice_num - 1]
                    print(f"‚úÖ Dipilih: {selected_repo['name']}")
                    return selected_repo
                else:
                    print(f"‚ùå Pilihan harus antara 0-{len(repos)}")
            except ValueError:
                print("‚ùå Masukkan angka yang valid!")
            except KeyboardInterrupt:
                print("\n‚ùå Dibatalkan oleh user")
                return None
    
    def create_new_repository(self) -> Optional[Dict]:
        print("\nüìù Membuat Repository Baru")
        
        repo_name = input("Nama repository: ").strip()
        if not repo_name:
            print("‚ùå Nama repository tidak boleh kosong!")
            return None
        
        description = input("Deskripsi (opsional): ").strip()
        
        private_choice = input("Private repository? (y/n) [n]: ").strip().lower()
        is_private = private_choice in ['y', 'yes']
        
        try:
            data = {
                "name": repo_name,
                "description": description,
                "private": is_private,
                "auto_init": False
            }
            
            response = self.session.post(f"{self.base_url}/user/repos", json=data)
            
            if response.status_code == 201:
                repo_data = response.json()
                print(f"‚úÖ Repository '{repo_name}' berhasil dibuat!")
                return repo_data
            else:
                error_msg = response.json().get('message', 'Unknown error')
                print(f"‚ùå Gagal membuat repository: {error_msg}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return None
    
    def get_files_to_upload(self) -> List[Tuple[Path, int]]:
        current_dir = Path.cwd()
        files_to_upload = []
        
        ignore_patterns = {
            self.script_name,
            '.git', '.gitignore', '__pycache__', '.DS_Store', 'Thumbs.db',
            '.env', '.venv', 'venv', 'env', 'node_modules', '.pytest_cache',
            '.coverage', '.mypy_cache', 'dist', 'build', '.idea', '.vscode'
        }
        
        binary_extensions = {'.exe', '.bin', '.so', '.dll', '.dylib', '.zip', '.tar', '.gz', '.rar', '.7z', '.jar'}
        
        def should_ignore(path: Path) -> bool:
            name = path.name
            if name in ignore_patterns or (name.startswith('.') and name not in ['.gitignore', '.env.example']):
                return True
            if path.suffix.lower() in binary_extensions:
                return True
            return False
        
        for item in current_dir.rglob('*'):
            if item.is_file():
                skip = False
                for parent in item.parents:
                    if should_ignore(parent):
                        skip = True
                        break
                
                if not skip and not should_ignore(item):
                    try:
                        file_size = item.stat().st_size
                        if file_size <= self.max_file_size:
                            files_to_upload.append((item, file_size))
                        else:
                            self.safe_print(f"‚ö†Ô∏è  Melewati file besar: {item.name} ({file_size / 1024 / 1024:.1f}MB)")
                    except OSError:
                        continue
        
        files_to_upload.sort(key=lambda x: x[1])
        return files_to_upload
    
    def upload_single_file(self, repo: Dict, file_info: Tuple[Path, int], file_num: int, total_files: int) -> bool:
        file_path, file_size = file_info
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                time.sleep(self.request_delay)
                
                with open(file_path, 'rb') as f:
                    content = f.read()
                
                content_encoded = base64.b64encode(content).decode('utf-8')
                
                relative_path = file_path.relative_to(Path.cwd())
                github_path = str(relative_path).replace('\\', '/')
                
                data = {
                    "message": f"Upload {github_path}",
                    "content": content_encoded
                }
                
                url = f"{self.base_url}/repos/{repo['full_name']}/contents/{github_path}"
                
                try:
                    check_response = self.session.get(url, timeout=(5, 15))
                    action = "Upload"
                    if check_response.status_code == 200:
                        existing_file = check_response.json()
                        data["sha"] = existing_file["sha"]
                        action = "Update"
                except:
                    action = "Upload"
                
                response = self.session.put(url, json=data, timeout=(10, 30))
                
                size_mb = file_size / 1024 / 1024
                if response.status_code in [200, 201]:
                    self.safe_print(f"‚úÖ [{file_num}/{total_files}] {action}: {github_path} ({size_mb:.2f}MB)")
                    self.update_counters(True)
                    return True
                elif response.status_code == 409:
                    if attempt < max_retries - 1:
                        time.sleep(2 ** attempt)
                        continue
                    self.update_counters(False, conflict=True)
                    return False
                else:
                    if attempt < max_retries - 1:
                        time.sleep(2 ** attempt)
                        continue
                    self.safe_print(f"‚ùå [{file_num}/{total_files}] Gagal {action.lower()}: {github_path} - HTTP {response.status_code}")
                    self.update_counters(False)
                    return False
                    
            except requests.exceptions.RequestException as e:
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt * 2
                    self.safe_print(f"‚ö†Ô∏è  [{file_num}/{total_files}] Retry {attempt + 1}/{max_retries}: {file_path.name} (wait {wait_time}s)")
                    time.sleep(wait_time)
                    continue
                else:
                    self.safe_print(f"‚ùå [{file_num}/{total_files}] Network error: {file_path.name} - Max retries exceeded")
                    self.update_counters(False)
                    return False
            except Exception as e:
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)
                    continue
                else:
                    self.safe_print(f"‚ùå [{file_num}/{total_files}] Error: {file_path.name} - {str(e)[:50]}...")
                    self.update_counters(False)
                    return False
        
        return False
    
    def upload_project_parallel(self, repo: Dict) -> None:
        files = self.get_files_to_upload()
        
        if not files:
            print("‚ùå Tidak ada file untuk diupload!")
            return
        
        total_size = sum(size for _, size in files) / 1024 / 1024
        print(f"\nüì§ Mengupload {len(files)} file ({total_size:.1f}MB) ke '{repo['name']}'...")
        print(f"üöÄ Menggunakan {self.max_workers} thread paralel")
        
        self.success_count = 0
        self.failed_count = 0
        self.conflict_count = 0
        
        print("-" * 80)
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            future_to_file = {
                executor.submit(self.upload_single_file, repo, file_info, i, len(files)): file_info
                for i, file_info in enumerate(files, 1)
            }
            
            for future in as_completed(future_to_file):
                future.result()
        
        elapsed_time = time.time() - start_time
        upload_speed = total_size / elapsed_time if elapsed_time > 0 else 0
        
        print("-" * 80)
        print(f"üìä Hasil Upload:")
        print(f"‚úÖ Berhasil: {self.success_count}")
        print(f"‚ùå Gagal: {self.failed_count}")
        if self.conflict_count > 0:
            print(f"‚ö†Ô∏è  Konflik: {self.conflict_count}")
        print(f"‚è±Ô∏è  Waktu: {elapsed_time:.1f} detik")
        print(f"üöÄ Kecepatan: {upload_speed:.1f} MB/s")
        print(f"üìÅ Repository: {repo['html_url']}")
        
        if self.failed_count > 0 or self.conflict_count > 0:
            print(f"\nüí° Tip: Error 409 (conflict) biasanya karena file sedang di-update.")
            print("    Jalankan ulang script untuk retry file yang gagal.")
    
    def run(self):
        try:
            if not self.authenticate():
                return
            
            print("\n‚öôÔ∏è  Konfigurasi Upload:")
            max_workers_input = input(f"Jumlah thread paralel [{self.max_workers}]: ").strip()
            if max_workers_input.isdigit():
                self.max_workers = min(max(int(max_workers_input), 1), 8)
            
            print(f"\nüîç Mengambil daftar repository...")
            repos = self.get_repositories()
            
            selected_repo = self.select_repository(repos)
            if not selected_repo:
                return
            
            files = self.get_files_to_upload()
            total_size = sum(size for _, size in files) / 1024 / 1024
            
            print(f"\nüìã Preview Upload:")
            print(f"   üìÅ Repository: {selected_repo['name']}")
            print(f"   üìÑ File count: {len(files)}")
            print(f"   üíæ Total size: {total_size:.1f}MB")
            print(f"   üßµ Threads: {self.max_workers}")
            
            confirm = input("\nLanjutkan upload? (y/n): ").strip().lower()
            if confirm not in ['y', 'yes']:
                print("‚ùå Upload dibatalkan")
                return
            
            self.upload_project_parallel(selected_repo)
            
        except KeyboardInterrupt:
            print("\n‚ùå Script dihentikan oleh user")
        except Exception as e:
            print(f"‚ùå Error tidak terduga: {e}")
        finally:
            self.session.close()

def main():
    uploader = GitHubUploader()
    uploader.run()

if __name__ == "__main__":
    main()